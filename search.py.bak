# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called by
Pacman agents (in searchAgents.py).
"""

import util
from pacman import Directions

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem.
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state.
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s, s, w, s, w, w, s, w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())

    valid_path=[]
    close_state = []
    close_state.insert(0,problem.getStartState())

    def getValidPath(state):
        if len(state) == 0:
            return 1

        for item in reversed(state):
            if item[0] not in close_state:
                if (problem.isGoalState(item[0])):
                    valid_path.insert(0,item[1])
                    return 0
                close_state.insert(0,item[0])
                p = getValidPath(problem.getSuccessors(item[0]))
                if p==0 :
                    valid_path.insert(0,item[1])
                    return 0
        return 1

    p = getValidPath(problem.getSuccessors(problem.getStartState()))
    return valid_path 

    
    #util.raiseNotDefined()

def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""
    "*** YOUR CODE HERE ***"

    valid_path=[]
    close_state = []
    open_state = []
    direct= {"South":"North","North":"South","East":"West","West":"East","left":"right","right":"left","up":"down","down":"up"}

    start_state = problem.getStartState()
    print("start state")
    print(start_state)
    if (problem.isGoalState(start_state)):
        return []
   
    def getValidPath(state):
        #print("check the state of............")
        successors = problem.getSuccessors(state)

        for item in successors:
            if item[0] not in close_state and item[0] not in open_state :
                print item[0]
                print " hasn't been traverse"
                if (problem.isGoalState(item[0])):
                    close_state.append(item[0])
                    return 0
                open_state.insert(0,item[0])
    
        if len(open_state)==0:
            return 1
        next_state = open_state.pop()
        close_state.append(next_state)
        ret=getValidPath(next_state)

        if ret==0:
            return 0
        else:
            return 1
        
    close_state.append(start_state)
    p = getValidPath(start_state)

    if p==0:
        final_state = close_state.pop()
        print final_state
        succ = problem.getSuccessors(final_state)
        while len(close_state)!=0:
            final_state = close_state.pop()
            #print ("search path if")
            #print final_state
            #print ("in")
            #print succ
            for item in succ:
                if final_state == item[0]:
                    #print "insert path"
                    #print final_state
                    #print item[0]
                    #print item[1]
                    #print direct[item[1]]
                    valid_path.insert(0,direct[item[1]])
                    
                    succ = problem.getSuccessors(final_state)
                    break
        print valid_path
        return valid_path            
    else:
        return []
    #util.raiseNotDefined()
    

def uniformCostSearch(problem):
    """Search the node of least total cost first."""
    "*** YOUR CODE HERE ***"
    
    # store the path 
    valid_path=[]
    
    # store the states that have been processed
    close_state = []
    
    # store the states that haven't been processed
    open_state = util.PriorityQueue()    
    
    # store action seqence by which can be reach the state from starting poing
    # the seqence is presentented like follows:
    # {'(5,5)':['w,s,e,w',10],'(10,8)':['w,w,e,w,s,n,e',30]}
    action_seq = {}
    
    # mapping table
    direct= {"South":"North","North":"South","East":"West","West":"East","left":"right","right":"left","up":"down","down":"up"}
    
    
    start_state = problem.getStartState()
    print type(start_state)
    print("start state")
    print(str(tuple(start_state)))
   
    # if the starting point is the goal , return 
    if (problem.isGoalState(start_state)):
        return []
   
    #put the first state into open_state queue with cost 0   
    open_state.push(start_state, 0) ;
    
    #assign the start start with empty action and cost 0      
    action_seq[str(tuple(start_state))] = []
    action_seq[str(tuple(start_state))].append('South')
    action_seq[str(tuple(start_state))].append(0)
    
       
    print action_seq
    
    # set found flag = 0
    flag = 0 

    
    while (open_state.isEmpty()==False):
        state = open_state.pop()
        print "---------------------------------"
        print state
        act = []
        print "parent's action:"
        act.append(action_seq[str(tuple(state))][0])
        print act
        cst = action_seq[str(tuple(state))][1]
        
        close_state.append(state)

        successors = problem.getSuccessors(state)
        
        for item in successors:					
            if item[0] not in close_state:
            	  new_act = act
                new_act.append(item[1])
                print "child's action:",new_act
                cost=problem.getCostOfActions(new_act)
                print cost

                print item[0]
                print " hasn't been traverse"
                if (problem.isGoalState(item[0])):
                    close_state.append(item[0])
                    flag=1
                    break
                                    
                
                open_state.update(item[0],cost)

                if str(tuple(item[0])) in action_seq.keys():
                    if (cst>cost):
                        action_seq[str(tuple(item[0]))][0]=new_act 
                        action_seq[str(tuple(item[0]))][1]=cost
                else:
                    action_seq[str(tuple(item[0]))]=[]
                    action_seq[str(tuple(item[0]))].append(new_act)
                    action_seq[str(tuple(item[0]))].append(cost)

 
        if flag==1:        
        	  break
 
    if flag == 0:  # no path found
    	  return [] 


    final_state = close_state.pop()
    print final_state
    succ = problem.getSuccessors(final_state)
    while len(close_state)!=0:
        final_state = close_state.pop()
        #print ("search path if")
        #print final_state
        #print ("in")
        #print succ
        for item in succ:
            if final_state == item[0]:
                    #print "insert path"
                    #print final_state
                    #print item[0]
                    #print item[1]
                    #print direct[item[1]]
                    valid_path.insert(0,direct[item[1]])
                    
                    succ = problem.getSuccessors(final_state)
                    break
        print valid_path
        return valid_path            
    


def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
